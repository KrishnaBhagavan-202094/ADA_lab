class Graph:
    def __init__(self, num_of_nodes):
        self.m_num_of_nodes = num_of_nodes
        self.m_graph = [[0 for column in range(num_of_nodes)]
                    for row in range(num_of_nodes)]
    def add_edge(self, node1, node2, weight):
        self.m_graph[node1][node2] = weight
        self.m_graph[node2][node1] = weight
    def prims_mst(self):
        postitive_inf = float('inf')
        selected_nodes = [False for node in range(self.m_num_of_nodes)]
        result = [[0 for column in range(self.m_num_of_nodes)]
                 for row in range(self.m_num_of_nodes)]
        indx = 0
        while(False in selected_nodes):
            minimum = postitive_inf
            start = 0
            end = 0

            for i in range(self.m_num_of_nodes):
                if selected_nodes[i]:
                    for j in range(self.m_num_of_nodes):
                        if (not selected_nodes[j] and self.m_graph[i][j]>0):
                            if self.m_graph[i][j] < minimum:
                               minimum = self.m_graph[i][j]
                               start, end = i, j
            selected_nodes[end] = True
            result[start][end] = minimum
            if minimum == postitive_inf:
                result[start][end] = 0
            indx += 1
            result[end][start] = result[start][end]
        return result
v = int(input("Enter Number of vertices: "))
example_graph = Graph(v)
num_edges = int(input("Enter number of edges: "))
edges = [list(map(int, input("Enter edges : ").split(" "))) for i in range(num_edges)]
for edge in edges:
    v1, v2, w = edge
    example_graph.add_edge(v1, v2, w)
result=example_graph.prims_mst()
print("MST edges are : ")
for i in range(len(result)):
    for j in range(0 + i, len(result)):
        if result[i][j] != 0:
            print("%d - %d: %d" % (i, j, result[i][j]))
